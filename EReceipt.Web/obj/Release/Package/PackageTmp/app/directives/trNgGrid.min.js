var TrNgGrid; !function () { var e = "trNgGrid", t = "trNgGridHeader", i = "tr-ng-grid-header", n = "trNgGridBody", r = "tr-ng-grid-body", o = "trNgGridFooter", l = "tr-ng-grid-footer", a = "trNgGridGlobalFilter", s = "tr-ng-grid-global-filter", d = "trNgGridPager", g = "tr-ng-grid-pager", p = "trNgGridColumn", c = "tr-ng-grid-column", u = "trNgGridColumnSort", m = "tr-ng-grid-column-sort", f = "trNgGridColumnFilter", h = "tr-ng-grid-column-filter", v = "tr-ng-grid-row-page-item-index", O = "tr-ng-grid table table-hover", I = "tr-ng-cell", y = "", C = "tr-ng-title col-lg-9 nopadding", D = "tr-ng-sort", G = "tr-ng-column-filter", P = "col-lg-9 nopadding", S = "selectedRow", b = "tr-ng-grid-footer form-inline", w = function () { function e(e, t, i, n, r, o, l) { var a = this; this.$compile = e, this.$parse = o, this.$timeout = l, this.gridElement = i, this.internalScope = t, this.scheduledRecompilationDereg = null; var s = "gridOptions"; this.gridOptions = { items: [], selectedItems: [], filterBy: null, filterByFields: {}, orderBy: null, orderByReverse: !1, pageItems: null, currentPage: 0, totalItems: null, enableFiltering: !0, enableSorting: !0, enableSelections: !0, enableMultiRowSelections: !0, onDataRequiredDelay: 1e3 }, this.gridOptions.onDataRequired = n.onDataRequired ? t.onDataRequired : null, this.gridOptions.gridColumnDefs = [], t[s] = this.gridOptions, this.externalScope = this.internalScope.$parent, this.linkScope(this.internalScope, s, n), this.gridOptions.onDataRequired && t.$watchCollection("[gridOptions.filterBy, gridOptions.filterByFields, gridOptions.orderBy, gridOptions.orderByReverse, gridOptions.currentPage]", function () { a.dataRequestPromise && (a.$timeout.cancel(a.dataRequestPromise), a.dataRequestPromise = null), a.dataRequestPromise = a.$timeout(function () { a.dataRequestPromise = null, a.gridOptions.onDataRequired(a.gridOptions) }, a.gridOptions.onDataRequiredDelay, !0) }), this.internalScope.$watch("enableMultiRowSelections", function (e, t) { e === t || e || a.gridOptions.selectedItems.length > 1 && a.gridOptions.selectedItems.splice(1) }), this.internalScope.$watch("enableSelections", function (e, t) { e === t || e || (a.gridOptions.selectedItems.splice(0), a.gridOptions.enableMultiRowSelections = !1) }) } return e.prototype.setColumnOptions = function (e, t) { e >= this.gridOptions.gridColumnDefs.length ? (this.gridOptions.gridColumnDefs.push({}), this.setColumnOptions(e, t)) : this.gridOptions.gridColumnDefs[e] = t }, e.prototype.toggleSorting = function (e, t) { t && (this.gridOptions.orderBy != e ? this.gridOptions.orderBy = e : this.gridOptions.orderByReverse = !this.gridOptions.orderByReverse) }, e.prototype.setFilter = function (e, t) { t ? this.gridOptions.filterByFields[e] = t : delete this.gridOptions.filterByFields[e], this.gridOptions.filterByFields = $.extend({}, this.gridOptions.filterByFields) }, e.prototype.toggleItemSelection = function (e) { if (this.gridOptions.enableSelections) { var t = this.gridOptions.selectedItems.indexOf(e); t >= 0 ? this.gridOptions.selectedItems.splice(t, 1) : (this.gridOptions.enableMultiRowSelections || this.gridOptions.selectedItems.splice(0), this.gridOptions.selectedItems.push(e)) } }, e.prototype.scheduleRecompilationOnAvailableItems = function () { var e = this; this.scheduledRecompilationDereg || this.gridOptions.items && this.gridOptions.items.length || (this.scheduledRecompilationDereg = this.internalScope.$watch("items.length", function (t) { t > 0 && (e.scheduledRecompilationDereg(), e.$compile(e.gridElement)(e.externalScope)) })) }, e.prototype.linkScope = function (e, t, i) { var n = e[t]; for (var r in n) { var o = "undefined" != typeof i[r] && null != i[r]; if (o) { var l = !1; "undefined" != typeof e[r] && null != e[r] && (n[r] = e[r], l = n[r] instanceof Array); var a = this.$parse(i[r]), s = a && a.assign; s && !function (i) { e.$watch(t + "." + i, function (t, r) { t !== r && (e[i] = n[i]) }), e.$watch(i, function (t, r) { t !== r && (n[i] = e[i]) }) }(r) } } }, e.prototype.splitByCamelCasing = function (e) { var t = e.split(/(?=[A-Z])/); return t.length && t[0].length && (t[0] = t[0][0].toLocaleUpperCase() + t[0].substr(1)), t.join(" ") }, e }(); angular.module("trNgGrid", []).directive(e, [function () { return { restrict: "A", scope: { items: "=", selectedItems: "=?", filterBy: "=?", filterByFields: "=?", orderBy: "=?", orderByReverse: "=?", pageItems: "=?", currentPage: "=?", totalItems: "=?", enableFiltering: "=?", enableSorting: "=?", enableSelections: "=?", enableMultiRowSelections: "=?", onDataRequired: "&", onDataRequiredDelay: "=?" }, controller: ["$compile", "$scope", "$element", "$attrs", "$transclude", "$parse", "$timeout", w], compile: function (e) { e.addClass(O); var t = !1, n = !1, o = e.children("thead"); 0 == o.length && (o = $("<thead>"), n = !0); var a = o.children("tr"); 0 == a.length && (a = $("<tr>").appendTo(o)), a.attr(i, ""), a.children("th[field-name]").attr(c, ""); var s = e.children("tbody"); 0 === s.length && (s = $("<tbody>").appendTo(e)); var d = s.children("tr"); 0 === d.length && (d = $("<tr>").appendTo(s)), s.attr(r, ""); var g = e.children("tfoot"); 0 == g.length && (g = $("<tfoot>"), t = !0); var p = g.children("tr"); if (0 == p.length && (p = $("<tr>").appendTo(g)), 0 == p.children("td").length) { var u = $("<td>").attr("colspan", "999").appendTo(p); $("<div>").attr(l, "").appendTo(u) } n && e.prepend(o), t && g.insertBefore(s) } } }]).directive(t, ["$compile", function (t) { return { restrict: "A", scope: !1, require: "^" + e, compile: function () { return { pre: function (e, i, n, r) { if (0 == i.children("th").length) if (r.gridOptions.items && r.gridOptions.items.length > 0) { var o = []; for (var l in r.gridOptions.items[0]) l.match(/^[_\$]/g) || o.push(l); for (var a = 0; a < o.length; a++) { var s = $("<th>").attr(c, "").attr("field-name", o[a]).appendTo(i); t(s)(e) } } else r.scheduleRecompilationOnAvailableItems() } } } } }]).directive(p, ["$compile", function (t) { return { restrict: "A", scope: { enableFiltering: "=?" }, require: "^" + e, compile: function () { var e; return { pre: function (t, i, n, r) { var o = "TH" == i.prop("tagName"); if (!o) throw "The template has an invalid header column template element. Column templates must be defined on TH elements inside THEAD/TR"; if (e = i.parent().children("th").index(i), !(0 > e)) { t.gridOptions = r.gridOptions, t.toggleSorting = function (e, t) { return r.toggleSorting(e, t) }, t.filter = "", t.$watch("filter", function (e, i) { e !== i && r.setFilter(t.currentGridColumnDef.fieldName, e) }); var l = function () { t.currentGridColumnDef.fieldName = n.fieldName, t.currentGridColumnDef.displayName = "undefined" == typeof n.displayName ? r.splitByCamelCasing(n.fieldName) : n.displayName, t.currentGridColumnDef.enableFiltering = t.enableFiltering, t.currentGridColumnDef.enableSorting = "true" == n.enableSorting || "undefined" == typeof n.enableSorting && t.gridOptions.enableSorting, t.currentGridColumnDef.displayAlign = n.displayAlign, t.currentGridColumnDef.displayFormat = n.displayFormat, t.currentGridColumnDef.cellWidth = n.cellWidth, t.currentGridColumnDef.cellHeight = n.cellHeight }; t.currentGridColumnDef = {}, l(), t.$watchCollection("[gridOptions.enableFiltering,gridOptions.enableSorting]", function () { l() }), r.setColumnOptions(e, t.currentGridColumnDef), i.removeAttr(c) } }, post: function (e, i) { if (e.currentGridColumnDef) { if (!e.currentGridColumnDef.fieldName) throw "The column definition for trNgGrid must contain the field name"; if (e.currentGridColumnDef.cellWidth && i.css("width", e.currentGridColumnDef.cellWidth), e.currentGridColumnDef.cellHeight && i.css("height", e.currentGridColumnDef.cellHeight), "" == i.text()) { var n = $("<div>").addClass(I), r = $("<div>").addClass(y).appendTo(n); $("<div ng-class=\"{'linkPointer sortingTitle':currentGridColumnDef.enableSorting}\" ng-click='toggleSorting(currentGridColumnDef.fieldName, currentGridColumnDef.enableSorting)'>").addClass(C).text(e.currentGridColumnDef.displayName).appendTo(r), $("<div>").attr(m, "").appendTo(r), $("<div>").attr(h, "").appendTo(n), i.append(t(n)(e)) } } } } } } }]).directive(u, [function () { return { restrict: "A", replace: !0, template: function () { return "<div ng-click='toggleSorting(currentGridColumnDef.fieldName,currentGridColumnDef.enableSorting)' title='Sort' class='nopadding col-lg-1 " + D + "'><i ng-show='currentGridColumnDef.enableSorting && gridOptions.orderBy==currentGridColumnDef.fieldName' ng-class=\"{'fa fa-caret-down': gridOptions.orderByReverse, 'fa fa-caret-up': !gridOptions.orderByReverse}\"></i></div>" } } }]).directive(f, [function () { return { restrict: "A", replace: !0, template: function () { return "<div ng-show='currentGridColumnDef.enableFiltering' class='" + G + "'><div class='" + P + "'><input class='form-control input-sm' type='text' ng-model='filter'/></div></div>" }, link: function () { } } }]).filter("paging", function () { return function (e, t) { if (e && (t.totalItems = e.length), !t.pageItems || !e || 0 == e.length) return e; t.currentPage || (t.currentPage = 0); var i = t.currentPage * t.pageItems; i >= e.length && (t.currentPage = 0, i = 0); var n = t.currentPage * t.pageItems + t.pageItems; return e.slice(i, n) } }).directive(n, ["$compile", function (t) { return { restrict: "A", scope: !0, require: "^" + e, replace: !0, compile: function (e) { var i = e.children("tr"); return e.contents().remove(), { post: function (e, n, o, l) { e.gridOptions = l.gridOptions, e.toggleItemSelection = function (e) { return l.toggleItemSelection(e) }; var a = "gridItem in gridOptions.items"; e.gridOptions.onDataRequired || (a += " | filter:gridOptions.filterBy | filter:gridOptions.filterByFields | orderBy:gridOptions.orderBy:gridOptions.orderByReverse | paging:gridOptions"); var s = i.clone(!0); s.attr("ng-repeat", a), s.attr("ng-click") || s.attr("ng-click", "toggleItemSelection(gridItem)"), s.attr("ng-class", "{'" + S + "':gridOptions.selectedItems.indexOf(gridItem)>=0}"), s.attr(v, "{{$index}}"), angular.forEach(e.gridOptions.gridColumnDefs, function (e, t) { var i = s.children("td:nth-child(" + (t + 1) + ")"), n = i.attr("field-name"), r = !1; if (n !== e.fieldName) { r = !0; var o = $("<td>"); 0 == i.length ? s.append(o) : i.before(o), i = o } else r = "" == i.text(); if (r) { var l = $("<div>").addClass(I); if (e.fieldName) { l.attr("field-name", e.fieldName); var a = "{{gridItem." + e.fieldName; e.displayFormat && ("|" != e.displayFormat[0] && "." != e.displayFormat[0] && (a += " | "), a += e.displayFormat), a += "}}", l.text(a) } else l.text("Invalid column match inside the table body"); i.append(l) } e.displayAlign && i.addClass("text-" + e.displayAlign), e.cellWidth && i.css("width", e.cellWidth), e.cellHeight && i.css("height", e.cellHeight) }), n.append(t(s)(e)), n.removeAttr(r), n.children("td[" + c + "]").removeAttr(c) } } } } }]).directive(o, [function () { return { restrict: "A", scope: !1, require: "^" + e, replace: !0, template: '<div class="' + b + '"><span ' + s + '=""/><span ' + g + '=""/></div>' } }]).directive(a, [function () { return { restrict: "A", replace: !0, scope: !0, require: "^" + e, template: function () { return '<span ng-show="gridOptions.enableFiltering" class="pull-left form-group"><input class="form-control" type="text" ng-model="gridOptions.filterBy" placeholder="Filter"/></span>' }, compile: function () { return { pre: function (e, t, i, n) { e.gridOptions = n.gridOptions }, post: function () { } } } } }]).directive(d, [function () { var t = function (e, t) { e.gridOptions = t.gridOptions, e.isPaged = !!e.gridOptions.pageItems, e.totalItemsCount = "undefined" != typeof e.gridOptions.totalItems && null != e.gridOptions.totalItems ? e.gridOptions.totalItems : e.gridOptions.items ? e.gridOptions.items.length : 0, e.startItemIndex = e.isPaged ? e.gridOptions.pageItems * e.gridOptions.currentPage : 0, e.endItemIndex = e.isPaged ? e.startItemIndex + e.gridOptions.pageItems - 1 : e.totalItemsCount - 1, e.endItemIndex >= e.totalItemsCount && (e.endItemIndex = e.totalItemsCount - 1), e.endItemIndex < e.startItemIndex && (e.endItemIndex = e.startItemIndex), e.lastPageIndex = e.totalItemsCount && e.isPaged ? Math.floor(e.totalItemsCount / e.gridOptions.pageItems) + (e.totalItemsCount % e.gridOptions.pageItems ? 0 : -1) : 0, e.pageIndexes = []; for (var i = 0; i <= e.lastPageIndex; i++) e.pageIndexes.push(i); e.pageSelectionActive = e.pageIndexes.length > 1, e.pageItemsActive = e.totalItemsCount > 0 && e.totalItemsCount > 10, e.pageCanGoBack = e.isPaged && e.gridOptions.currentPage > 0, e.pageCanGoForward = e.isPaged && e.gridOptions.currentPage < e.lastPageIndex, e.navigateToPage = function (t, i) { e.gridOptions.currentPage = i, t.preventDefault(), t.stopPropagation() }, e.switchPageSelection = function (t, i, n) { e.pageSelectionActive = i, e.pageItemsActive = n, t && (t.preventDefault(), t.stopPropagation()) } }; return { restrict: "A", scope: !0, require: "^" + e, template: function () { return '<span class="pull-right form-group"><ul class="pagination"><li ng-show="pageCanGoBack" ><a href="#" ng-click="navigateToPage($event, 0)" title="First Page"><i class="fa fa-angle-double-left" /></a></li><li ng-show="pageCanGoBack" ><a href="#" ng-click="navigateToPage($event, gridOptions.currentPage - 1)" title="Previous Page"><i class="fa fa-angle-left" /></a></li><li ng-show="pageItemsActive" style="white-space: nowrap;"><span>pages: <select class="pagingDropdown" ng-model="gridOptions.pageItems"><option value="10">10</option><option value="20">20</option><option value="50">50</option><option value="100">100</option></select></span></li><li ng-show="pageSelectionActive" style="white-space: nowrap;"><span>page: <select class="pagingDropdown" ng-model="gridOptions.currentPage" ng-options="pageIndex as (pageIndex+1) for pageIndex in pageIndexes"></select></span></li><li class="disabled" style="white-space: nowrap;"><span ng-hide="totalItemsCount">No items to display</span><span ng-show="totalItemsCount" title="Select Page">  {{startItemIndex+1}} - {{endItemIndex+1}} displayed <span>, {{totalItemsCount}} in total</span></span > </li><li ng-show="pageCanGoForward"><a href="#" ng-click="navigateToPage($event, gridOptions.currentPage + 1)" title="Next Page"><i class="fa fa-angle-right" /></a></li><li><li ng-show="pageCanGoForward"><a href="#" ng-show="pageCanGoForward" ng-click="navigateToPage($event, lastPageIndex)" title="Last Page"><i class="fa fa-angle-double-right" /></a></li></ul></span>' }, replace: !0, link: { pre: function (e, i, n, r) { t(e, r) }, post: function (e, i, n, r) { e.$watch("[gridOptions.currentPage, gridOptions.items.length, gridOptions.totalItems, gridOptions.pageItems]", function (i, n) { for (var o = 0; o < i.length; o++) if (i[o] != n[o]) return void t(e, r) }, !0) } } } }]) }(TrNgGrid || (TrNgGrid = {}));